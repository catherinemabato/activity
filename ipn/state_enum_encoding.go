// Code generated by go-enum-encoding; DO NOT EDIT.

package ipn

import "errors"

var ErrUnknownState = errors.New("unknown State")

func (s *State) UnmarshalTextName(text []byte) error {
	switch string(text) {
	case "NoState":
		*s = NoState
	case "InUseOtherUser":
		*s = InUseOtherUser
	case "NeedsLogin":
		*s = NeedsLogin
	case "NeedsMachineAuth":
		*s = NeedsMachineAuth
	case "Stopped":
		*s = Stopped
	case "Starting":
		*s = Starting
	case "Running":
		*s = Running
	default:
		return ErrUnknownState
	}
	return nil
}

var seq_bytes_State = [...][]byte{[]byte("NoState"), []byte("InUseOtherUser"), []byte("NeedsLogin"), []byte("NeedsMachineAuth"), []byte("Stopped"), []byte("Starting"), []byte("Running")}

func (s State) MarshalTextName() ([]byte, error) {
	switch s {
	case NoState:
		return seq_bytes_State[0], nil
	case InUseOtherUser:
		return seq_bytes_State[1], nil
	case NeedsLogin:
		return seq_bytes_State[2], nil
	case NeedsMachineAuth:
		return seq_bytes_State[3], nil
	case Stopped:
		return seq_bytes_State[4], nil
	case Starting:
		return seq_bytes_State[5], nil
	case Running:
		return seq_bytes_State[6], nil
	default:
		return nil, ErrUnknownState
	}
}

var seq_string_State = [...]string{"NoState", "InUseOtherUser", "NeedsLogin", "NeedsMachineAuth", "Stopped", "Starting", "Running"}

func (s State) String() string {
	switch s {
	case NoState:
		return seq_string_State[0]
	case InUseOtherUser:
		return seq_string_State[1]
	case NeedsLogin:
		return seq_string_State[2]
	case NeedsMachineAuth:
		return seq_string_State[3]
	case Stopped:
		return seq_string_State[4]
	case Starting:
		return seq_string_State[5]
	case Running:
		return seq_string_State[6]
	default:
		return ""
	}
}
